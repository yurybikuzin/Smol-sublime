%YAML 1.2
---
name: ViewTree
file_extensions: [ view.tree ]
scope: source.tree
variables:
  any: '(?=.)'

contexts:
  illegalInclude:
    - meta_include_prototype: false
    - match: .
      scope: invalid.illegal.tree illegalInclude

  comment:
    - match: ^\t+
    - match: '\t'
      scope: invalid.illegal.tree comment
    - match: .
      scope: comment.tree

  lineStartInclude:
    - match: '\t+'
      scope: here
      set:
        - match: '[ ]+'
          scope: invalid.illegal.tree lineStartInclude
          set:
            - include: lineStartInclude
            - include: lineItemInclude
        - include: lineItemInclude

  main:
    - match: ^(\t*)-([ ]|$)
      scope: comment.tree
      embed: comment
      escape: ^(?!\1\t)
    - match: (^\$[\w\$][\w\d\$]*)
      scope: entity.name.class.tree
      set: spaceOrEnd
    - match: ' '
      scope: invalid.illegal.tree main
    - include: lineStartInclude
    # - include: illegalInclude
    - match: .
      scope: invalid.illegal.tree main2

  spaceOrEnd:
    - include: spaceOrEndInclude
    # - include: illegalInclude
    - match: .
      scope: invalid.illegal.tree spaceOrEnd

  spaceOrEndInclude:
    - match: '[ ]?$'
      set: main
    - match: '[ ]'
      set: lineItem

  expectsIdAfterSpaceOrEnd:
    - match: '[ ]?$'
      set: expectsId
    - match: '[ ]'
      set: expectsId

  expectsId:
    - include: idInclude
    - include: illegalInclude
    # - match:

  idInclude:
    - match: ([a-zA-Z_][a-zA-Z_\d\$]*(?!-)(?=\s|$|\?|!))
      scope: meta.property.object.js idInclude
      set: requiredArgOptional

  attrNameInclude:
    - match: ([a-zA-Z_][a-zA-Z_\d-]*)
      scope: meta.property.object.js attrNameInclude
      set: spaceOrEnd

  lineItemInclude:
    - match: \d+(\.\d+)?\b
      scope: constant.numeric.tree
      set: spaceOrEnd
    - match: (true|false|null)\b
      scope: constant.language.tree
      set: spaceOrEnd
    - match: (\$[a-zA-Z_\$][a-zA-Z_\d\$]*)
      scope: support.class.tree
      set: spaceOrEnd
    - include: idInclude
    - include: attrNameInclude
    - match: (/|\*|\@|\^|-)
      scope: keyword.tree
      set: spaceOrEnd
    - match: (<=>|<=|=>)
      scope: keyword.tree
      set: expectsIdAfterSpaceOrEnd
    - include: literalInclude
    - include: accessorInclude
    - include: localizationStarterInclude

  lineItem:
    - include: lineItemInclude
    # - include: illegalInclude
    - match: .
      scope: invalid.illegal.tree lineItem


  requiredArgOptional:
    - match: '(!)([\w]+)'
      captures:
        1: keyword.tree
        2: variable.parameter.tree
      set: optionalArgOptional
    - include: optionalArgOptionalInclude
    - include: spaceOrEndInclude
    # - include: illegalInclude
    - match: .
      scope: invalid.illegal.tree requiredArgOptional

  optionalArgOptionalInclude:
    - match: '(\?)([\w]+)'
      captures:
        1: keyword.tree
        2: variable.parameter.tree
      set: spaceOrEnd

  optionalArgOptional:
    - include: optionalArgOptionalInclude
    - include: spaceOrEndInclude
    # - include: illegalInclude
    - match: .
      scope: invalid.illegal.tree optionalArgOptional

  literalInclude:
    - match: (\\)(.*)$
      scope: string.unquoted.tree
      set: main



